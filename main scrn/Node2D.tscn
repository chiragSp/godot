[gd_scene load_steps=7 format=2]

[ext_resource path="res://scrn/BG.png" type="Texture" id=1]
[ext_resource path="res://icon.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

// Gonkee's burn & dissolve shader for Godot 3 - full tutorial https://youtu.be/1zvI-QOwny4
// If you use this shader, I would prefer if you gave credit to me and my channel

uniform vec4 ash : hint_color;
uniform vec4 fire : hint_color;

uniform int OCTAVES = 6;

// values that need to be set from a script
uniform float start_time = 99999999.0;
uniform float duration = 1.0;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

vec4 burn(vec4 original, vec2 uv, float time) {
	
	vec4 new_col = original; // value that will be returned
	
	float noise = fbm(uv * 6.0);
	
	float thickness = 0.1;
	float outer_edge = (time - start_time) / duration;
	float inner_edge = outer_edge + thickness;
	
	// fade-in to the orange/black gradient
	if (noise < inner_edge) {
		float grad_factor = (inner_edge - noise) / thickness;
		grad_factor = clamp(grad_factor, 0.0, 1.0);
		vec4 fire_grad = mix(fire, ash, grad_factor);
		
		float inner_fade = (inner_edge - noise) / 0.02;
		inner_fade = clamp(inner_fade, 0.0, 1.0);
		
		new_col = mix(new_col, fire_grad, inner_fade);
	}
	
	// fade-out of the black at the end of the gradient
	if (noise < outer_edge) {
		new_col.a = 1.0 - (outer_edge - noise) / 0.03;
		new_col.a = clamp(new_col.a, 0.0, 1.0);
	}
	
	new_col.a *= original.a;
	return new_col;
}

void fragment() {
	vec4 tex = textureLod(TEXTURE, UV, 0.0);
	COLOR = tex;

//	theoretical shader manipulations
//	COLOR.rgb /= 2.0;
//	COLOR.g = 1.0 - COLOR.g;
//	COLOR.rgb *= mod(UV.y, 0.2) / 0.2;
	
	COLOR = burn(COLOR, UV, TIME);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/ash = Color( 0.694118, 0.568627, 0.568627, 1 )
shader_param/fire = Color( 0.827451, 0.235294, 0.101961, 1 )
shader_param/OCTAVES = 6
shader_param/start_time = 3.0
shader_param/duration = 1.0

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

// Gonkee's water shader for Godot 3 - full tutorial https://youtu.be/uhMAHpV_cDg
// If you use this shader, I would prefer if you gave credit to me and my channel

uniform vec4 blue_tint : hint_color;

uniform vec2 sprite_scale;
uniform float scale_x = 0.67;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

void fragment(){
	
	vec2 noisecoord1 = UV * sprite_scale * scale_x;
	vec2 noisecoord2 = UV * sprite_scale * scale_x + 4.0;
	
	vec2 motion1 = vec2(TIME * 0.3, TIME * -0.4);
	vec2 motion2 = vec2(TIME * 0.1, TIME * 0.5);
	
	vec2 distort1 = vec2(noise(noisecoord1 + motion1), noise(noisecoord2 + motion1)) - vec2(0.5);
	vec2 distort2 = vec2(noise(noisecoord1 + motion2), noise(noisecoord2 + motion2)) - vec2(0.5);
	
	vec2 distort_sum = (distort1 + distort2) / 60.0;
	
	vec4 color = textureLod(SCREEN_TEXTURE, SCREEN_UV + distort_sum, 0.0);
	
	color = mix(color, blue_tint, 0.3);
	color.rgb = mix(vec3(0.5), color.rgb, 1.4);
	
	float near_top = (UV.y + distort_sum.y) / (0.2 / sprite_scale.y);
	near_top = clamp(near_top, 0.0, 1.0);
	near_top = 1.0 - near_top;
	
	color = mix(color, vec4(1.0), near_top);
	
	float edge_lower = 0.6;
	float edge_upper = edge_lower + 0.1;
	
	if(near_top > edge_lower){
		color.a = 0.0;
		
		if(near_top < edge_upper){
			color.a = (edge_upper - near_top) / (edge_upper - edge_lower);
		}
	}
	
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/blue_tint = Color( 0.137255, 0.133333, 0.745098, 1 )
shader_param/sprite_scale = Vector2( 0, 120 )
shader_param/scale_x = 0.67

[node name="shader" type="Node2D"]

[node name="BG" type="Sprite" parent="."]
position = Vector2( 259.766, 184.064 )
texture = ExtResource( 1 )

[node name="smoke" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
position = Vector2( 233.657, 141.941 )
scale = Vector2( 7.69302, 4.52329 )
texture = ExtResource( 2 )

[node name="burn and dissolve" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
position = Vector2( 233.657, 141.941 )
scale = Vector2( 7.69302, 4.52329 )
texture = ExtResource( 2 )

[node name="lava" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
position = Vector2( 233.657, 141.941 )
scale = Vector2( 7.69302, 4.52329 )
texture = ExtResource( 2 )

[node name="noise" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
position = Vector2( 233.657, 141.941 )
scale = Vector2( 7.69302, 4.52329 )
texture = ExtResource( 2 )

[node name="Mandelbrot" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
position = Vector2( 233.657, 141.941 )
scale = Vector2( 7.69302, 4.52329 )
texture = ExtResource( 2 )

[node name="fire" type="Sprite" parent="."]
visible = false
material = SubResource( 4 )
position = Vector2( 240.416, 138.593 )
scale = Vector2( 8.51301, 5.33103 )
texture = ExtResource( 2 )

[node name="water" type="Sprite" parent="."]
visible = false
material = SubResource( 4 )
position = Vector2( 240.416, 138.593 )
scale = Vector2( 8.51301, 5.33103 )
texture = ExtResource( 2 )
